{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/acceptance/ember-3d-nav-test.js","dummy/tests/helpers/resolver.js","dummy/tests/lint/app.lint-test.js","dummy/tests/lint/templates.template.lint-test.js","dummy/tests/lint/tests.lint-test.js","dummy/tests/lint/true.stylelint-test.js","dummy/tests/test-helper.js","dummy/tests/unit/components/nav-marker-test.js","dummy/tests/unit/mixins/debounced-response-test.js","dummy/tests/unit/mixins/responds-to-scroll-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"dummy/tests/acceptance/ember-3d-nav-test\", [\"ember-native-dom-helpers\", \"@ember/test-helpers\", \"ember-3d-nav/utils\", \"qunit\", \"ember-qunit\", \"ember-test-helpers/wait\"], function (_emberNativeDomHelpers, _testHelpers, _utils, _qunit, _emberQunit, _wait) {\n  \"use strict\";\n\n  (0, _qunit.module)('Acceptance | Nav menu behavior', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _qunit.test)('clicking menu button opens nav', async function (assert) {\n      assert.expect(2);\n      await (0, _testHelpers.visit)('/');\n      assert.equal((0, _testHelpers.find)('.ember-3d-nav-container').classList.contains('nav-is-visible'), false, 'nav-is-visible class not applied initially');\n      await (0, _testHelpers.click)((0, _testHelpers.find)('.nav-trigger'));\n      assert.equal((0, _testHelpers.find)('.ember-3d-nav-container').classList.contains('nav-is-visible'), true, 'nav-is-visible class applied after clicking menu button');\n    });\n    (0, _qunit.test)('clicking an option selects it and closes the menu', async function (assert) {\n      assert.expect(4);\n      const done = assert.async();\n      await (0, _testHelpers.visit)('/');\n      assert.equal((0, _testHelpers.find)('.ember-3d-nav-container').classList.contains('nav-is-visible'), false, 'nav-is-visible class not applied initially');\n      await (0, _testHelpers.click)((0, _testHelpers.find)('.nav-trigger'));\n      assert.equal((0, _testHelpers.find)('.ember-3d-nav-container').classList.contains('nav-is-visible'), true, 'nav-is-visible class applied after clicking menu button');\n      await (0, _testHelpers.click)((0, _testHelpers.findAll)('.flexi-centered')[2]);\n      assert.equal((0, _testHelpers.findAll)('.flexi-centered')[2].classList.contains('is-selected'), true, 'nav item is selected');\n      return (0, _wait.default)().then(() => {\n        setTimeout(() => {\n          assert.equal((0, _testHelpers.find)('.ember-3d-nav-container').classList.contains('nav-is-visible'), false, 'nav-is-visible class removed after clicking nav item');\n          done();\n        }, 2000);\n      });\n    });\n    (0, _qunit.test)('scrolling applies isFixedAndScrolled', async function (assert) {\n      assert.expect(5);\n      await (0, _testHelpers.visit)('/');\n      assert.equal((0, _utils.getScrollTop)(), 0, 'window scroll is 0');\n      await (0, _emberNativeDomHelpers.scrollTo)(window, 0, 50);\n      assert.equal((0, _utils.getScrollTop)(), 50, 'window scroll is 50');\n      assert.equal((0, _testHelpers.find)('.nav-trigger-container').classList.contains('is-fixed-and-scrolled'), true, 'is-fixed-and-scrolled applied');\n      await (0, _emberNativeDomHelpers.scrollTo)(window, 0, 0);\n      assert.equal((0, _utils.getScrollTop)(), 0, 'window scroll is 0');\n      assert.equal((0, _testHelpers.find)('.nav-trigger-container').classList.contains('is-fixed-and-scrolled'), false, 'is-fixed-and-scrolled removed');\n    });\n  });\n});","define(\"dummy/tests/helpers/resolver\", [\"exports\", \"dummy/resolver\", \"dummy/config/environment\"], function (_exports, _resolver, _environment) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n\n  const resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n  var _default = resolver;\n  _exports.default = _default;\n});","define(\"dummy/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/contact.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/contact.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/home.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/home.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/portfolio.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/portfolio.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/team.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/team.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/technologies.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/technologies.js should pass ESLint\\n\\n');\n  });\n});","define(\"dummy/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('dummy/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"dummy/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('acceptance/ember-3d-nav-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/ember-3d-nav-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/components/nav-marker-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/nav-marker-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/mixins/debounced-response-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/debounced-response-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/mixins/responds-to-scroll-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/responds-to-scroll-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"dummy/tests/lint/true.stylelint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('Stylelint');\n  QUnit.test('index.html should pass stylelint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'index.html should pass stylelint');\n  });\n  QUnit.test('styles/app.scss should pass stylelint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'styles/app.scss should pass stylelint');\n  });\n  QUnit.test('styles/fonts.scss should pass stylelint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'styles/fonts.scss should pass stylelint');\n  });\n});","define(\"dummy/tests/test-helper\", [\"dummy/app\", \"dummy/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"dummy/tests/unit/components/nav-marker-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | nav marker', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('calculate colorNumber: not multiColor', function (assert) {\n      assert.expect(1);\n      const navMarker = this.owner.factoryFor('component:nav-marker').create();\n      navMarker.set('multiColor', false);\n      assert.equal(navMarker.get('colorNumber'), 'color-1');\n    });\n    (0, _qunit.test)('calculate colorNumber: multiColor', function (assert) {\n      assert.expect(1);\n      const navMarker = this.owner.factoryFor('component:nav-marker').create();\n      navMarker.set('multiColor', true);\n      assert.equal(navMarker.get('colorNumber'), 'color-1');\n    });\n  });\n});","define(\"dummy/tests/unit/mixins/debounced-response-test\", [\"ember-3d-nav/mixins/debounced-response\", \"qunit\"], function (_debouncedResponse, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Mixin | debounced response', function () {\n    // Replace this with your real tests.\n    (0, _qunit.test)('it works', function (assert) {\n      const DebouncedResponseObject = Ember.Object.extend(_debouncedResponse.default);\n      const subject = DebouncedResponseObject.create();\n      assert.ok(subject);\n    });\n  });\n});","define(\"dummy/tests/unit/mixins/responds-to-scroll-test\", [\"ember-3d-nav/mixins/responds-to-scroll\", \"qunit\"], function (_respondsToScroll, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Mixin | responds to scroll', function () {\n    // Replace this with your real tests.\n    (0, _qunit.test)('it works', function (assert) {\n      const RespondsToScrollObject = Ember.Object.extend(_respondsToScroll.default);\n      const subject = RespondsToScrollObject.create();\n      assert.ok(subject);\n    });\n  });\n});","define('dummy/config/environment', [], function() {\n  var prefix = 'dummy';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}