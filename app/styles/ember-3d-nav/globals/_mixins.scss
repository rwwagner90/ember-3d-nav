//////////////////////////////
// Mixins
//////////////////////////////

///
/// Center vertically, horizontally, or both; element applied to must be absolutely positioned
/// @access public
/// @param {String} $xy [xy] - x, y or xy to indicate horizontal, vertical, or both respectively
/// @output - CSS required to perform desired centering
///
@mixin center($xy:xy) {
  @if $xy == xy {
    bottom: auto;
    left: 50%;
    right: auto;
    top: 50%;
    transform: translateX(-50%) translateY(-50%);
  }
  @else if $xy == x {
    left: 50%;
    right: auto;
    transform: translateX(-50%);
  }
  @else if $xy == y {
    bottom: auto;
    top: 50%;
    transform: translateY(-50%);
  }
}

/// Adds clearfix the :after psuedo-element to an element
/// @access public
/// @output - Clearfix CSS
///
@mixin clearfix() {
  &:after {
    clear: both;
    content: "";
    display: table;
  }
}

///
/// Adds font-smoothing to an element
/// @access public
/// @output - Vendor specific font-smoothing
///
@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/// Media query mixin for supplying responsive styles nested within the selector
/// @access public
/// @param {String} $breakpoint - Name of a breakpoint in the supplied or default map
/// @param {Map} $map [$breakpoints] - Map of breakpoints
/// @output - Media query with content passed through
///
@mixin bp($breakpoint, $map: $breakpoints) {
  $value: map-get($map, $breakpoint);

  @if $value != null {
    @media only screen and (min-width: $value) {
      @content;
    }
  }
  @else {
    @warn 'Unfortunately, no value with the name #{$breakpoint} could be retrieved from `$breakpoints`. ' +
      'Please make sure it is defined in `$breakpoints` map.';
  }
}
